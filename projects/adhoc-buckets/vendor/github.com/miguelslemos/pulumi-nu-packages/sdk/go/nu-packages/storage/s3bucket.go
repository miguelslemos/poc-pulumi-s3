// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/miguelslemos/pulumi-nu-packages/sdk/go/nu-packages"
	"github.com/miguelslemos/pulumi-nu-packages/sdk/go/nu-packages/internal"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type S3Bucket struct {
	pulumi.ResourceState

	// The managed S3 Bucket.
	Bucket s3.BucketOutput `pulumi:"bucket"`
	// Bucket ID and ARN
	BucketId nupackages.BucketResultBucketIDPtrOutput `pulumi:"bucketId"`
}

// NewS3Bucket registers a new resource with the given unique name, arguments, and options.
func NewS3Bucket(ctx *pulumi.Context,
	name string, args *S3BucketArgs, opts ...pulumi.ResourceOption) (*S3Bucket, error) {
	if args == nil {
		args = &S3BucketArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Bucket
	err := ctx.RegisterRemoteComponentResource("nu-packages:storage:s3Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type s3bucketArgs struct {
	// Arguments to use instead of the default values during creation.
	Args *nupackages.Bucket `pulumi:"args"`
	// Identity of an existing bucket to use. Cannot be used in combination with `args`
	Existing *nupackages.ExistingBucket `pulumi:"existing"`
}

// The set of arguments for constructing a S3Bucket resource.
type S3BucketArgs struct {
	// Arguments to use instead of the default values during creation.
	Args *nupackages.BucketArgs
	// Identity of an existing bucket to use. Cannot be used in combination with `args`
	Existing *nupackages.ExistingBucketArgs
}

func (S3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketArgs)(nil)).Elem()
}

type S3BucketInput interface {
	pulumi.Input

	ToS3BucketOutput() S3BucketOutput
	ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput
}

func (*S3Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (i *S3Bucket) ToS3BucketOutput() S3BucketOutput {
	return i.ToS3BucketOutputWithContext(context.Background())
}

func (i *S3Bucket) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketOutput)
}

func (i *S3Bucket) ToOutput(ctx context.Context) pulumix.Output[*S3Bucket] {
	return pulumix.Output[*S3Bucket]{
		OutputState: i.ToS3BucketOutputWithContext(ctx).OutputState,
	}
}

// S3BucketArrayInput is an input type that accepts S3BucketArray and S3BucketArrayOutput values.
// You can construct a concrete instance of `S3BucketArrayInput` via:
//
//	S3BucketArray{ S3BucketArgs{...} }
type S3BucketArrayInput interface {
	pulumi.Input

	ToS3BucketArrayOutput() S3BucketArrayOutput
	ToS3BucketArrayOutputWithContext(context.Context) S3BucketArrayOutput
}

type S3BucketArray []S3BucketInput

func (S3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (i S3BucketArray) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return i.ToS3BucketArrayOutputWithContext(context.Background())
}

func (i S3BucketArray) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketArrayOutput)
}

func (i S3BucketArray) ToOutput(ctx context.Context) pulumix.Output[[]*S3Bucket] {
	return pulumix.Output[[]*S3Bucket]{
		OutputState: i.ToS3BucketArrayOutputWithContext(ctx).OutputState,
	}
}

// S3BucketMapInput is an input type that accepts S3BucketMap and S3BucketMapOutput values.
// You can construct a concrete instance of `S3BucketMapInput` via:
//
//	S3BucketMap{ "key": S3BucketArgs{...} }
type S3BucketMapInput interface {
	pulumi.Input

	ToS3BucketMapOutput() S3BucketMapOutput
	ToS3BucketMapOutputWithContext(context.Context) S3BucketMapOutput
}

type S3BucketMap map[string]S3BucketInput

func (S3BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (i S3BucketMap) ToS3BucketMapOutput() S3BucketMapOutput {
	return i.ToS3BucketMapOutputWithContext(context.Background())
}

func (i S3BucketMap) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketMapOutput)
}

func (i S3BucketMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*S3Bucket] {
	return pulumix.Output[map[string]*S3Bucket]{
		OutputState: i.ToS3BucketMapOutputWithContext(ctx).OutputState,
	}
}

type S3BucketOutput struct{ *pulumi.OutputState }

func (S3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (o S3BucketOutput) ToS3BucketOutput() S3BucketOutput {
	return o
}

func (o S3BucketOutput) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return o
}

func (o S3BucketOutput) ToOutput(ctx context.Context) pulumix.Output[*S3Bucket] {
	return pulumix.Output[*S3Bucket]{
		OutputState: o.OutputState,
	}
}

// The managed S3 Bucket.
func (o S3BucketOutput) Bucket() s3.BucketOutput {
	return o.ApplyT(func(v *S3Bucket) s3.BucketOutput { return v.Bucket }).(s3.BucketOutput)
}

// Bucket ID and ARN
func (o S3BucketOutput) BucketId() nupackages.BucketResultBucketIDPtrOutput {
	return o.ApplyT(func(v *S3Bucket) nupackages.BucketResultBucketIDPtrOutput { return v.BucketId }).(nupackages.BucketResultBucketIDPtrOutput)
}

type S3BucketArrayOutput struct{ *pulumi.OutputState }

func (S3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*S3Bucket] {
	return pulumix.Output[[]*S3Bucket]{
		OutputState: o.OutputState,
	}
}

func (o S3BucketArrayOutput) Index(i pulumi.IntInput) S3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].([]*S3Bucket)[vs[1].(int)]
	}).(S3BucketOutput)
}

type S3BucketMapOutput struct{ *pulumi.OutputState }

func (S3BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (o S3BucketMapOutput) ToS3BucketMapOutput() S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*S3Bucket] {
	return pulumix.Output[map[string]*S3Bucket]{
		OutputState: o.OutputState,
	}
}

func (o S3BucketMapOutput) MapIndex(k pulumi.StringInput) S3BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].(map[string]*S3Bucket)[vs[1].(string)]
	}).(S3BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketInput)(nil)).Elem(), &S3Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketArrayInput)(nil)).Elem(), S3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketMapInput)(nil)).Elem(), S3BucketMap{})
	pulumi.RegisterOutputType(S3BucketOutput{})
	pulumi.RegisterOutputType(S3BucketArrayOutput{})
	pulumi.RegisterOutputType(S3BucketMapOutput{})
}
